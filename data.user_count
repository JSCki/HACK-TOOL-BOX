<!DOCTYPE html><html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>.</title>
    <style>
    
body {
    font-family: Arial, sans-serif;
    background-color: #fff; /* Dark background */
    color: #e0e0e0; /* Light text color */
    margin: 0;
    padding: 10px;
}

.container {
    margin-top: 25px;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between; /* Space out cards */
}

.project-card {
    min-height: 20vh;
    position: relative; /* Establish a positioning context for absolute positioning */
    background-color: #000;
    border: 1px solid #fff;
    border-radius: 8px;
    padding: 15px;
    margin: 10px;
    flex: 0 1 calc(40% - 20px);
    transition: transform 0.2s;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
    max-width: 35%;
}

.project-card:hover {
    transform: scale(1.05);
}

.project-logo img {
    max-width: 100px;
    height: auto;
}

.project-info {
    margin: 10px 0;
}

.project-user-info,
.project-slot-info {
    background-color: #2a2a2a; /* Darker background for info sections */
    padding: 10px;
    border-radius: 5px;
    margin: 5px 0;
}

.project-user-info p,
.project-slot-info p {
    margin: 0; /* Remove default margins */
}

/* Full card overlay for locked projects */
.project-no-slots {
    position: absolute; /* Cover the entire card */
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(42, 42, 42, 0.8); /* Slightly transparent for blur effect */
    border-radius: 8px; /* Match card's border radius */
    backdrop-filter: blur(1px); /* Apply blur effect */
    display: flex; /* Center the content */
    flex-direction: column; /* Align vertically */
    align-items: center; /* Center horizontally */
    justify-content: center; /* Center vertically */
    z-index: 1; /* Ensure it appears above the card content */
}

.lock-icon {
    z-index: 2; /* Ensure it appears above the text */
}

.lock-icon img {
    width: 50px; /* Adjust the size of the lock icon */
}

.project-no-slots p {
    margin: 20px 0 0; /* Adjust margin for text */
    text-align: center; /* Center-align the text */
    z-index: 2; /* Ensure text appears above the overlay */
    padding: 8px;
}

/**/

 .video-embed {
          position: relative;
    margin: 20px 0;
    border: 1px solid #fff;
    border-radius: 8px;
    overflow: hidden;
    /* max-width: 600px; */
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
    width: 100%;
    margin: 10px;
    }
    
       .video-title {
         font-size: 18px;
    font-weight: bold;
    color: #e0e0e0;
    margin-bottom: 10px;
    text-align: center;
    margin: 10px;
    color: #000;
    margin-top: 30px;
    }

    .video-embed iframe {
        width: 100%;
        height: 315px;
        border: 0;
    }

    .hide-video-button {
        background-color: #e0e0e0;
        color: #000;
        border: none;
        padding: 8px 16px;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 2;
        transition: transform 0.2s;
    }

    .hide-video-button:hover {
        transform: scale(1.1);
    }


  /* Custom modal styles */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 10;
        align-items: center;
        justify-content: center;
    }

    .modal {
        background-color: #2a2a2a;
        padding: 20px;
        border-radius: 8px;
        max-width: 300px;
        text-align: center;
        color: #e0e0e0;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
    }

    .modal button {
        margin-top: 15px;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        font-weight: bold;
        cursor: pointer;
    }

    .confirm-button {
        background-color: #ff4d4d;
        color: white;
    }

    .cancel-button {
        background-color: #666;
        color: white;
        margin-left: 10px;
    }

    .hidden {
        display: none;
    }
    
    </style>
</head>
<body>

<div class="container">
        <div class="project-card" onclick="window.location.href='https://in000.in/#/register?invitationCode=821523092023'">
        <div class="project-logo">
            <img src="images/h5setting_20240614134808nnhk.png" alt="In999 Logo">
        </div>
        <div class="project-info">
            <p>In999</p>
        </div>

                    <div class="project-slot-info">
                <p>11 Slots left</p>
            </div>
            </div>

<div class="project-card" onclick="window.location.href='https://t.me/+lg937q0Qkd0yZjVl?blank=true'">
        <div class="project-logo" style="    align-items: center;
    width: 30px;
    display: flex;
    gap: 7px;
    font-weight: bold;
    font-size: 18px;margin-bottom: 27px;">
            <img src="images/bluetelegram.svg" alt="In999 Logo" style="width: 100%;">
            <p1>Telegram</p1>
        </div>
        <div class="project-info">
            <p>Join Telegram</p>
        </div>

                    <div class="project-slot-info">
                <p>@toolbox_pro</p>
            </div>
            </div>
            
       
            <div class="video-title" id="video-title">How to use mod apk?</div>
<div id="videoSection" class="video-embed">
 
        <button class="hide-video-button" onclick="showConfirmModal()">Already watched!</button>
     
           <div id="player"></div>
    </div>
    
</div>

<!-- Custom modal for confirmation -->
<div id="confirmModal" class="modal-overlay">
    <div class="modal">
        <p>Are you sure you want to hide this video?</p>
        <button class="confirm-button" onclick="confirmHideVideo()">Yes</button>
        <button class="cancel-button" onclick="closeConfirmModal()">Cancel</button>
    </div>
</div>

<style>
    /* Style for the online user count */
    .live-user-count {
        position: fixed;
        top: 10px;
        left: 10px;
        /*background-color: #f1f1f1;*/
        padding: 8px 12px;
        border-radius: 8px;
        /*box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);*/
        font-family: Arial, sans-serif;
        font-size: 14px;
        color: #333;
        z-index: 1000;
    }

    /* Style for the green dot */
    .online-dot {
        display: inline-block;
        width: 8px;
        height: 8px;
        background-color: #4CAF50; /* Green color */
        border-radius: 50%;
        margin-right: 6px;
        vertical-align: middle;
    }
</style>

<div class="live-user-count">
    <span class="online-dot"></span> Online users: <span id="userCount">Loading...</span>
</div>

<script src="https://www.youtube.com/iframe_api"></script><script>
    let player;
    const videoId = 'wpmwCKkR_qQ';
    const storageKey = 'videoTimestamp';

    // Load the YouTube IFrame Player API
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            videoId: videoId,
            playerVars: { 'autoplay': 1, 'start': getSavedTimestamp() },
            events: {
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // Retrieve the last saved timestamp from localStorage
    function getSavedTimestamp() {
        return parseInt(localStorage.getItem(storageKey)) || 37;
    }

    // Save the current timestamp every second while the video is playing
    function onPlayerStateChange(event) {
        if (event.data === YT.PlayerState.PLAYING) {
            setInterval(() => {
                const currentTime = Math.floor(player.getCurrentTime());
                localStorage.setItem(storageKey, currentTime);
            }, 1000);
        }
    }
    
     // Check if the user has chosen to hide the video
    document.addEventListener('DOMContentLoaded', function() {
        if (localStorage.getItem('hideVideo') === 'true') {
            document.getElementById('videoSection').classList.add('hidden');
            document.getElementById('video-title').classList.add('hidden');
        }else{
            // Load the IFrame API asynchronously
    const tag = document.createElement('script');
    tag.src = 'https://www.youtube.com/iframe_api';
    const firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    
        }
    });

    // Show the custom confirmation modal
    function showConfirmModal() {
        document.getElementById('confirmModal').style.display = 'flex';
    }

    // Hide the video and save preference to localStorage if confirmed
    function confirmHideVideo() {
        document.getElementById('videoSection').classList.add('hidden');
        document.getElementById('video-title').classList.add('hidden');
        localStorage.setItem('hideVideo', 'true');
        player.stopVideo();
        closeConfirmModal();
    }

    // Close the custom confirmation modal
    function closeConfirmModal() {
        document.getElementById('confirmModal').style.display = 'none';
    }
    
</script>

<script>
// Function to fetch the live user count
function fetchUserCount() {
    fetch('./?user_count=true')
        .then(response => response.json())
        .then(data => {
            document.getElementById('userCount').innerText = data.user_count.html;
        })
        .catch(error => {
            console.error('Error fetching user count:', error);
        });
}

// Fetch the user count every 5 seconds
setInterval(fetchUserCount, 5000);

// Initial call to load the count on page load
fetchUserCount();
</script>


</body></html>
